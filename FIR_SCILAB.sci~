// FIR LPF design: rectangular window, with normalization & delay compensation
clc; clear; close;

disp("EC037 Program to Design FIR Low Pass Filter");

// Inputs
M = input('Enter the odd Filter length (M) = ');  // e.g. 49
Fs = input('Enter the Sampling Frequency (Hz) = '); // e.g. 8000
Fc = input('Enter the Analog Cutoff Frequency (Hz) = '); // e.g. 250

// convert analog cutoff to digital radian frequency
Wc = 2 * %pi * (Fc / Fs);

// center (zero-based)
Tuo = (M - 1) / 2;

// ideal impulse response (sinc) - length M
hd = zeros(1, M);
for n = 1:M
    k = (n - 1) - Tuo; // symmetric index
    if k == 0 then
        hd(n) = Wc / %pi;
    else
        hd(n) = sin(Wc * k) / (k * %pi);
    end
end

// rectangular window (or replace with hamming(W) for better stopband)
W = ones(1, M);
h = hd .* W;

// Normalize so DC gain = 1 (common practice)
h = h / sum(h);

// Save coefficients to file
filename = 'Coefficient.txt';   
fd = mopen(filename, 'w');  // open file in write mode
for k = 1:length(h)
    mfprintf(fd, '%0.10f\n', h(k));  // write each coefficient on a new line
end
mclose(fd);

disp("Filter coefficients saved to coeffi.txt");

// display coefficients
disp(h, "Filter Coefficients (h)");

// Frequency response (for plot)
[Hmag, fr] = frmag(h, 512); // higher FFT points for smoother curve
Hmag_dB = 20 * log10(Hmag ./ max(Hmag));

// Test signal (same as yours)
t = 0:1/Fs:0.1;
x = sin(2*%pi*50*t) + sin(2*%pi*100*t) + sin(2*%pi*500*t)+sin(2*%pi*1000*t);

// Full convolution
y_full = conv(x, h); // length = length(x)+M-1

// Compensate for group delay: integer delay = (M-1)/2
delay = (M - 1) / 2;
start_idx = delay + 1;
end_idx = start_idx + length(x) - 1;

// trim y to same length as x and aligned
y = y_full(start_idx : end_idx);

// Plots
scf(0);
subplot(3,1,1);
plot(2*fr, Hmag);
xlabel('Normalized Digital Frequency W');
ylabel('Magnitude');
title('EC037 Frequency Response of FIR LPF using Rectangular window');
xgrid(1);

subplot(3,1,2);
plot(2*fr, Hmag_dB);
xlabel('Normalized Digital Frequency W');
ylabel('Magnitude (dB)');
title('EC037 Frequency Response (dB)');
xgrid(1);

subplot(3,1,3);
plot(t, x, 'r'); // original
plot(t, y, 'b'); // filtered (aligned)
legend('Original','Filtered');
xlabel('Time (s)');
ylabel('Amplitude');
title('Original (red) and Filtered (blue) Signals');
xgrid(1);
